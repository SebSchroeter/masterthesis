rm(list = ls())
library(tidyr)
library(dplyr)
library(lmtest)
library(httpgd)
library(zoib)
library(arrow)
library(brms)
library(stargazer)
library(texreg)
library(ggplot2)
library(ggcorrplot)
library(nlme)
library(lsmeans)
library(patchwork)
setwd("~/Sebastian Masterthesis/Git repo/masterthesis")
monte_carlo_df<-read_feather("monte_carlo_df.feather")
rm(list = ls())
library(tidyr)
library(dplyr)
library(lmtest)
library(httpgd)
library(zoib)
library(arrow)
library(brms)
library(stargazer)
library(texreg)
library(ggplot2)
library(ggcorrplot)
library(nlme)
library(lsmeans)
library(patchwork)
setwd("~/Sebastian Masterthesis/Git repo/masterthesis")
monte_carlo_df<-read_feather("monte_carlo_df.feather")
## formateur per parliament ##
ols_per_parliament<-function(df){
#overwrite formateurs
df$formateur<- NA
#list all parliaments
parliaments <- unique(df$Parliament)
#loop over each parliament
for (parliament in parliaments){
indice<-which(df$Parliament==parliament)
#sample 1 formateur per batch as previously
formateurs<-sample(indice,size = 1,prob = df$'mvw-i'[indice])
df$formateur[indice]<-0
df$formateur[formateurs]<-1
}
model<-lm(gov_share~'mvw-i'+factor(formateur),data = df)
#collect coeffitients and p values
estimates<-summary(model)$coefficients[,1]
p_values<-summary(model)$coefficients[,4]
return(list("estimates"=estimates,"p_values"=p_values))
}
monte_carlo_ols <- function(df, n) {
# storage
all_estimates <- list()
all_p_values <- list()
# loop
for (i in 1:n) {
## decide whether to use independent formateurs or per-parliament wise: by using ols(df) or ols_per_parliament(df)
#careful: ols_per_parliament takes much longer due to looping over all parliaments n times.
result <- ols_per_parliament(df,Seat_bool)
all_estimates[[i]] <- result$estimates
all_p_values[[i]] <- result$p_values
}
# Convert list to DataFrame
estimates_df <- do.call(rbind, all_estimates)
p_values_df <- do.call(rbind, all_p_values)
# Return
return(list("estimates_df" = estimates_df, "p_values_df" = p_values_df))
}
## draws & study ##
set.seed(123)
mc_results<-monte_carlo_ols(monte_carlo_df,5000)
monte_carlo_ols <- function(df, n) {
# storage
all_estimates <- list()
all_p_values <- list()
# loop
for (i in 1:n) {
## decide whether to use independent formateurs or per-parliament wise: by using ols(df) or ols_per_parliament(df)
#careful: ols_per_parliament takes much longer due to looping over all parliaments n times.
result <- ols_per_parliament(df,Seat_bool)
all_estimates[[i]] <- result$estimates
all_p_values[[i]] <- result$p_values
}
# Convert list to DataFrame
estimates_df <- do.call(rbind, all_estimates)
p_values_df <- do.call(rbind, all_p_values)
# Return
return(list("estimates_df" = estimates_df, "p_values_df" = p_values_df))
}
mc_results<-monte_carlo_ols(monte_carlo_df,5000)
## formateur per parliament ##
ols_per_parliament<-function(df){
#overwrite formateurs
df$formateur<- NA
#list all parliaments
parliaments <- unique(df$Parliament)
#loop over each parliament
for (parliament in parliaments){
indice<-which(df$Parliament==parliament)
#sample 1 formateur per batch as previously
formateurs<-sample(indice,size = 1,prob = df$'mvw-i'[indice])
df$formateur[indice]<-0
df$formateur[formateurs]<-1
}
model<-lm(gov_share~'mvw-i'+factor(formateur),data = df)
#collect coeffitients and p values
estimates<-summary(model)$coefficients[,1]
p_values<-summary(model)$coefficients[,4]
return(list("estimates"=estimates,"p_values"=p_values))
}
monte_carlo_ols <- function(df, n) {
# storage
all_estimates <- list()
all_p_values <- list()
# loop
for (i in 1:n) {
## decide whether to use independent formateurs or per-parliament wise: by using ols(df) or ols_per_parliament(df)
#careful: ols_per_parliament takes much longer due to looping over all parliaments n times.
result <- ols_per_parliament(df,Seat_bool)
all_estimates[[i]] <- result$estimates
all_p_values[[i]] <- result$p_values
}
# Convert list to DataFrame
estimates_df <- do.call(rbind, all_estimates)
p_values_df <- do.call(rbind, all_p_values)
# Return
return(list("estimates_df" = estimates_df, "p_values_df" = p_values_df))
}
## draws & study ##
set.seed(123)
mc_results<-monte_carlo_ols(monte_carlo_df,5000)
## historgrams ##
hist(mc_results_Seats$estimates_df[,4],xlim = c(-0.1,0.1),breaks = 20,
main="Formateur-Coefficient Distribution",
xlab="Formateur-Coeffiecients",)
rm(list = ls())
library(tidyr)
library(dplyr)
library(lmtest)
library(httpgd)
library(zoib)
library(arrow)
library(brms)
library(stargazer)
library(texreg)
library(ggplot2)
library(ggcorrplot)
library(nlme)
library(lsmeans)
library(patchwork)
setwd("~/Sebastian Masterthesis/Git repo/masterthesis")
monte_carlo_df<-read_feather("monte_carlo_df.feather")
## formateur per parliament ##
ols_per_parliament<-function(df){
#overwrite formateurs
df$formateur<- NA
#list all parliaments
parliaments <- unique(df$Parliament)
#loop over each parliament
for (parliament in parliaments){
indice<-which(df$Parliament==parliament)
#sample 1 formateur per batch as previously
formateurs<-sample(indice,size = 1,prob = df$'mvw-i'[indice])
df$formateur[indice]<-0
df$formateur[formateurs]<-1
}
model<-lm(gov_share~'mvw-i'+factor(formateur),data = df)
#collect coeffitients and p values
estimates<-summary(model)$coefficients[,1]
p_values<-summary(model)$coefficients[,4]
return(list("estimates"=estimates,"p_values"=p_values))
}
monte_carlo_ols <- function(df, n) {
# storage
all_estimates <- list()
all_p_values <- list()
# loop
for (i in 1:n) {
## decide whether to use independent formateurs or per-parliament wise: by using ols(df) or ols_per_parliament(df)
#careful: ols_per_parliament takes much longer due to looping over all parliaments n times.
result <- ols_per_parliament(df,Seat_bool)
all_estimates[[i]] <- result$estimates
all_p_values[[i]] <- result$p_values
}
# Convert list to DataFrame
estimates_df <- do.call(rbind, all_estimates)
p_values_df <- do.call(rbind, all_p_values)
# Return
return(list("estimates_df" = estimates_df, "p_values_df" = p_values_df))
}
## draws & study ##
set.seed(123)
mc_results<-monte_carlo_ols(monte_carlo_df,5000)
## decide whether to use independent formateurs or per-parliament wise: by using ols(df) or ols_per_parliament(df)
#careful: ols_per_parliament takes much longer due to looping over all parliaments n times.
result <- ols_per_parliament(df)
monte_carlo_ols <- function(df, n) {
# storage
all_estimates <- list()
all_p_values <- list()
# loop
for (i in 1:n) {
#careful: ols_per_parliament takes long due to looping over all parliaments n times.
result <- ols_per_parliament(df)
all_estimates[[i]] <- result$estimates
all_p_values[[i]] <- result$p_values
}
# Convert list to DataFrame
estimates_df <- do.call(rbind, all_estimates)
p_values_df <- do.call(rbind, all_p_values)
# Return
return(list("estimates_df" = estimates_df, "p_values_df" = p_values_df))
}
## draws & study ##
set.seed(123)
mc_results<-monte_carlo_ols(monte_carlo_df,5000)
mc_results<-monte_carlo_ols(monte_carlo_df,5000)
rm(list = ls())
library(tidyr)
library(dplyr)
library(lmtest)
library(httpgd)
library(zoib)
library(arrow)
library(brms)
library(stargazer)
library(texreg)
library(ggplot2)
library(ggcorrplot)
library(nlme)
library(lsmeans)
library(patchwork)
rm(list = ls())
library(tidyr)
library(dplyr)
library(lmtest)
library(httpgd)
library(zoib)
library(arrow)
library(brms)
library(stargazer)
library(texreg)
library(ggplot2)
library(ggcorrplot)
library(nlme)
library(lsmeans)
library(patchwork)
setwd("~/Sebastian Masterthesis/Git repo/masterthesis")
df<-read_feather("long_df.feather")
monte_carlo_df<-read_feather("monte_carlo_df.feather")
